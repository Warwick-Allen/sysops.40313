---
- name: EverSeen Docker Compose

  hosts: everseen

  vars:
    node_exporter_name: node_exporter-1.7.0.linux-amd64

  tasks:

    # Provision the Ansible server.

    - name: Install required system packages
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: present
        update_cache: true
      become: true

    - name: Add Docker GPG apt key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      become: true

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present
      become: true

    - name: Update apt and install docker-ce
      ansible.builtin.apt:
        name: docker-ce
        state: present
        update_cache: true
      become: true

    - name: Install Docker Module for Python
      ansible.builtin.pip:
        name: docker

    - name: Run the Docker deamon
      ansible.builtin.service:
        name: docker
        state: started
      become: true

    - name: Copy Docker Compose files
      ansible.builtin.copy:
        src: docker
        dest: ./
        directory_mode: "0700"
        mode: "0600"

    # Install Node Exporter.

    - name: Install required system packages for Node Exporter installation
      ansible.builtin.apt:
        pkg:
          - coreutils
          - tar
          - gzip
          - unzip
        state: present
        update_cache: true
      become: true

    - name: Download Node Exporter
      ansible.builtin.get_url:
        url: "https://github.com/prometheus/node_exporter/releases/download/v1.7.0/{{ node_exporter_name }}.tar.gz"
        dest: ./
        checksum: sha256:a550cd5c05f760b7934a2d0afad66d2e92e681482f5f57a917465b1fba3b02a6
        mode: "0600"

    - name: Unpack Node Exporter
      ansible.builtin.unarchive:
        src: "{{ node_exporter_name }}.tar.gz"
        dest: "{{ ansible_user_dir }}/docker/web/"
        remote_src: true
        creates: "{{ ansible_user_dir }}/docker/web/{{ node_exporter_name }}/node_exporter"

    - name: Create a link to Node Exporter directory
      ansible.builtin.file:
        src: "{{ node_exporter_name }}"
        dest: "docker/web/node_exporter"
        state: link

    # Run Docker Compose and start the services.

    - name: Tear down existing services
      community.docker.docker_compose_v2:
        project_src: docker
        state: absent
      become: true

    # Fallback to running the "docker compose" command if the docker_compose_v2 module hits an error
    # (which it often does).
    - name: Create the services
      block:
        - name: Create the services using the docker_compose_v2 module
          community.docker.docker_compose_v2:
            project_src: docker
            state: stopped
            build: always
          become: true
      rescue:
        - name: Create the services using the "docker compose" command
          ansible.builtin.command:
            cmd: docker compose --project-directory docker build
          changed_when: true
          become: true

    - name: Start the services (this ensures the volumes are created)
      community.docker.docker_compose_v2:
        project_src: docker
        state: present
      become: true

    # Configure Prometheus.

    - name: Get information about the Prometheus configuration volume
      community.docker.docker_volume_info:
        name: docker_prometheus_config
      register: prometheus_config_volume

    - name: Update Prometheus configuration file
      ansible.builtin.copy:
        src: prometheus/conf/prometheus.yml
        dest: "{{ prometheus_config_volume.volume.Mountpoint }}"
        mode: "0600"
      become: true

    - name: Restart Prometheus
      community.docker.docker_compose_v2:
        project_src: docker
        services:
          - prometheus
        state: restarted
      become: true

    # Configure Grafana.

    - name: Install required system packages for Grafana configuration
      ansible.builtin.apt:
        pkg:
          - coreutils # Provides sha256sum, cut
          - sqlite    # Provides sqlite3
        state: present
        update_cache: true
      become: true

    - name: Copy the Grafana configuration files
      ansible.builtin.copy:
        src: grafana
        dest: ./
        directory_mode: "0700"
        mode: "0600"

    - name: Get the checksum of the current Grafana configuration SQL script
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          sha256sum grafana/grafana_config.sql |
          cut -d' ' -f1
        executable: /bin/bash
      register: grafana_config_sql_sha256_new
      changed_when: false

    - name: Get information about the Grafana database volume
      community.docker.docker_volume_info:
        name: docker_grafana_db
      register: grafana_db_volume

    - name: Set the checksum file name
      ansible.builtin.set_fact:
        grafana_checksum_fname: "{{ grafana_db_volume.volume.Mountpoint }}/last-applied-config-sql.sha256sum"

    - name: Get the checksum of the previous Grafana configuration SQL script
      ansible.builtin.shell:
        cmd: cat {{ grafana_checksum_fname }} || true
        executable: /bin/sh
      register: grafana_config_sql_sha256_old
      changed_when: false
      become: true

    - name: Conditionally update the Grafana configuration database
      become: true
      when: grafana_config_sql_sha256_new.stdout != grafana_config_sql_sha256_old.stdout
      block:
        - name: Set the original Grafana database file name
          ansible.builtin.set_fact:
            grafana_orig_database_fname: "{{ grafana_db_volume.volume.Mountpoint }}/grafana.db"

        - name: Set the temporary Grafana database file name
          ansible.builtin.set_fact:
            grafana_temp_database_fname: "{{ grafana_db_volume.volume.Mountpoint }}/.grafana.db"

        - name: Make a temporary copy of the Grafana configuration database
#               Working on a copy means that no updates are made to the database unless the entire
#               script completes successfully. Wrapping the script in a transaction should ensure
#               atomicity, but that seems to be unreliable.
          ansible.builtin.copy:
            src: "{{ grafana_orig_database_fname }}"
            dest: "{{ grafana_temp_database_fname }}"
            mode: "0640"
            remote_src: true

        - name: Update the temporary Grafana configuration database
          ansible.builtin.shell:
            cmd: "sqlite3 {{ grafana_temp_database_fname }} <grafana/grafana_config.sql"
            executable: /bin/sh
          register: grafana_result
          changed_when: grafana_result.rc == 0

        - name: Replace the Grafana configuration database wtih the updated temporary copy
          ansible.builtin.copy:
            src: "{{ grafana_temp_database_fname }}"
            dest: "{{ grafana_orig_database_fname }}"
            mode: "0640"
            remote_src: true

        - name: Write the checksum of the current Grafana configuration SQL script
          ansible.builtin.copy:
            content: "{{ grafana_config_sql_sha256_new.stdout }}"
            dest: "{{ grafana_checksum_fname }}"
            mode: "0640"
